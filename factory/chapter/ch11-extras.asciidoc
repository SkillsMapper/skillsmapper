













==== Retrieve the YAML configuration of the existing service

===== Deploying Services with Cloud Deploy

===== Build Initial Images for Each Service

Can these be added and stored in the factory?
The Concept of a warehouse is like an Artifact repository.

Source code as the raw materials.

Factory can also build (construct) the environment.

[source,shell]
----
gcloud builds submit --pack image=gcr.io/${PROJECT_ID}/skill-service:latest ../skill-service
gcloud builds submit --pack image=gcr.io/${PROJECT_ID}/fact-service:latest ../fact-service
gcloud builds submit --pack image=gcr.io/${PROJECT_ID}/profile-service:latest ../profile-service
----

==== Cloud Deploy

Create a service account to deploy:

Like the trucks shipping the product.

[source,shell]
----
gcloud
----

[source,shell]
----
gcloud projects add-iam-policy-binding PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe PROJECT_ID \
--format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/clouddeploy.jobRunner"
----

==== Terraform

The tool we will be using to automate the creating of infrastructure is Terraform.
This is an example of an Infrastructure as Code (IaC) tool.
While Google Cloud does have a similar tool, Google Deployment Managerfootnote:https://cloud.google.com/deployment-manager, this only supports Google Cloud.
Terraform supports all public clouds and many other types of infrastructure so is much more widely used even in the Google Cloud world.

Terraform is declarative much like Kubernetes in that you declare the desired state and the tool does its best to achieve that.
This is in contrast to the gcloud commands you have used in previous which are imperative, telling the tool explicitly what to do.

What Terraform is doing in this case is taking the blueprints defined in the configuration and building out the Citadel the entire secure environment.

* Infrastructure as Code (IaC)
* Multiple environments: dev, qa, prod

* CI with CLoud Build
* PubSub
* Continuous Delivery (Cloud Deploy)

* Canary
* Continuous Deployment

=== Pre-requisites

For each environment, you will need to create a project and configure Identity Platform before running Terraform.

==== Create a Project

Create a new project using the instructions from Chapter 4.

==== Enable Service

==== Create a Domain and Subdomain

e.g.

* `dev.skillsmapper.org` for development
* `qa.skillsmapper.org` for QA
* `skillsmapper.org` for production

==== Configure Identity Platform

* Enable Identity Platform in the marketplace by going to https://console.cloud.google.com/marketplace/details/google-cloud-platform/customer-identity and clicking the 'Enable Identity Platform' button.

Terraform import google_identity_platform_project_default_config.default {{name}}

* Add a Provider e.g. Google Provider
* Add an Authorised Domain e.g. `dev.skillsmapper.org`
* Copy the apiKey for Application Setup Details

==== Configure Terraform

Configure Terraform by creating a file named `terraform.tfvars` in the root of the repository.
The file should contain the following:

[source,terraform]
----
project_id = [PROJECT_ID]
region     = [REGION]
domain     = [DOMAIN]
api_key    = [API_KEY]
----

.Tip
[TIP]
====
As the profile service requires Cloud Firestore in Native mode, note that not all regions support Firestore.
You can find a list of supported regions here: https://cloud.google.com/firestore/docs/locations

Additionally, some regions may not support Cloud Build.
====

=== Run Terraform

[source,shell]
----
terraform init
----

[source,shell]
----
terraform apply
----

==== Terraform Limitations

Terraform will not wait for services to enable.
It may be better to enable services using the gcloud command line first.

=== Outer Loop

Whereas with the inner loop we want to be fast with the outer loop we can be more through.

* Lint the code: https://github.com/golangci/golangci-lint
* Run Tests
* Build the container



==== Tasks

* Setup Cloud Build as if different teams were working on each service

Automatically:

* Building
* Testing
* Signing all containers

Flag as s candidates for deployment.

==== Cloud Deploy

* Fully managed and scalable
* Built-in security controls.
* IAM
* One-click rollouts and rollbacks
* Audit logs
* Uses Skaffold

https://cloud.google.com/deploy/docs/deploy-app-run

Enable Cloud Deploy with the following command:

[source,bash]
-----
gcloud
-----

=== Labels

When creating resources, it is good practice to group them by giving them labels that can be used to identify them.
In the next chapter, we will see how these labels help for the observability of a project.
For you can use labels at the level of Terraform models to label the resources created for each service.

=== Building with Other Languages

* https://github.com/GoogleCloudPlatform/cloud-run-microservice-template-go
* https://github.com/GoogleCloudPlatform/cloud-run-microservice-template-nodejs
* https://github.com/GoogleCloudPlatform/cloud-run-microservice-template-java
* https://github.com/GoogleCloudPlatform/cloud-run-microservice-template-python
