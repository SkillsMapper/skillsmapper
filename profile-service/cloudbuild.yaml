---
steps:
  - id: Go Version
    name: gcr.io/cloud-builders/go:1.20
    dir: ${_SERVICE_NAME}
    entrypoint: go
    args:
      - version
  - id: Download Dependencies
    name: gcr.io/cloud-builders/go:1.20
    dir: ${_SERVICE_NAME}
    entrypoint: go
    args:
      - mod
      - download
  - id: Run Linting Checks
    name: golangci/golangci-lint
    dir: ${_SERVICE_NAME}
    entrypoint: golangci-lint
    args:
      - run
      - -v
      - --timeout=180s
  - id: Run Unit Tests
    name: gcr.io/cloud-builders/go:1.20
    dir: ${_SERVICE_NAME}
    entrypoint: go
    args:
      - test
      - -v
      - ./...
    env:
      - PROJECT_ID=${_DESTINATION_PROJECT_ID}
      - SERVICE_NAME=profile-service-test
  - id: Run Security Checks
    name: securego/gosec
    dir: ${_SERVICE_NAME}
    entrypoint: gosec
    args:
      - ./...
  - id: Build Container Image
    name: gcr.io/k8s-skaffold/pack
    dir: ${_SERVICE_NAME}
    entrypoint: pack
    args:
      - build
      - --builder=gcr.io/buildpacks/builder:v1
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA
  - id: Push Container Image
    name: gcr.io/cloud-builders/docker:latest
    dir: ${_SERVICE_NAME}
    args:
      - push
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA
  - id: Deploy to Cloud Run
    name: gcr.io/cloud-builders/gcloud:latest
    entrypoint: /bin/bash
    args:
      - -c
      - >
        gcloud run deploy ${_SERVICE_NAME} \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA \
          --project=${_DESTINATION_PROJECT_ID} \
          --region=${_REGION} \
          --service-account=${_SERVICE_NAME}-sa@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars=PROJECT_ID=${_DESTINATION_PROJECT_ID},SERVICE_NAME=${_SERVICE_NAME},DATABASE_NAME='${_PROFILE_DATABASE_NAME}'
